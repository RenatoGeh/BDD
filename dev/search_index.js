var documenterSearchIndex = {"docs":
[{"location":"#BinaryDecisionDiagrams-Documentation","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams Documentation","text":"","category":"section"},{"location":"","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams Documentation","text":"","category":"page"},{"location":"#API","page":"BinaryDecisionDiagrams Documentation","title":"API","text":"","category":"section"},{"location":"","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams Documentation","text":"Modules = [BinaryDecisionDiagrams]\nOrder = [:type, :constant, :function, :macro, :module]","category":"page"},{"location":"#BinaryDecisionDiagrams.Diagram","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.Diagram","text":"A Binary Decision Diagram.\n\nindex: the vertex variable (-1 if terminal vertex\nlow: low child vertex of BDD (undef if terminal vertex)\nhigh: high child vertex of BDD (undef if terminal vertex)\nvalue: terminal boolean value\nid: unique identifier\n\n\n\n\n\n","category":"type"},{"location":"#Base.:!=-Tuple{Diagram,Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"Base.:!=","text":"Returns whether the two given boolean functions are not equivalent.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:==-Tuple{Diagram,Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"Base.:==","text":"Returns whether the two given boolean functions are equivalent.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:|-Tuple{Diagram,Dict{Int64,Bool}}","page":"BinaryDecisionDiagrams Documentation","title":"Base.:|","text":"Returns a new reduced Diagram restricted to instantiation X.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:⊻-Tuple{Diagram,Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"Base.:⊻","text":"Returns a xor of the given boolean functions.\n\n\n\n\n\n","category":"method"},{"location":"#Base.hash-Tuple{Diagram,UInt64}","page":"BinaryDecisionDiagrams Documentation","title":"Base.hash","text":"Returns a unique hash for the whole BDD.\n\n\n\n\n\n","category":"method"},{"location":"#Base.sign-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"Base.sign","text":"Returns 0 if x is not a literal; else returns the literal's sign.\n\n\n\n\n\n","category":"method"},{"location":"#Base.size-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"Base.size","text":"Returns the number of nodes in the BDD graph.\n\n\n\n\n\n","category":"method"},{"location":"#Base.string-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"Base.string","text":"Return string representation of Diagram α.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.:¬-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.:¬","text":"Negates this boolean function.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.:∧-Tuple{Diagram,Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.:∧","text":"Returns a conjunction over the given boolean functions.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.:∨-Tuple{Diagram,Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.:∨","text":"Returns a disjunction over the given boolean functions.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.all_valuations-Tuple{Union{UnitRange{Int64}, Set{Int64}, Array{Int64,1}}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.all_valuations","text":"Computes all possible valuations of scope V and returns as a BitMatrix. Up to 64 variables.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.and-Tuple{Diagram,Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.and","text":"Returns a conjunction over the given boolean functions.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.apply-Tuple{Diagram,Diagram,Any}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.apply","text":"Returns a Diagram canonical representation of α ⊕ β, where ⊕ is some binary operator.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.apply_step-Tuple{Diagram,Diagram,Any,Dict{Tuple{Int64,Int64},Diagram}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.apply_step","text":"Recursively computes α ⊕ β. If the result was already computed as an intermediate result, return the cached result in T.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.atleast!-Tuple{Int64,Array{Int64,1}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.atleast!","text":"Constructs a BDD mapping to true if at least n literals in L are in the input; otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.atleast-Tuple{Int64,Array{Int64,1}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.atleast","text":"Constructs a BDD mapping to true if at least n literals in L are in the input; otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.atmost!-Tuple{Int64,Array{Int64,1}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.atmost!","text":"Constructs a BDD mapping to true if at most n literals in L are in the input; otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.atmost-Tuple{Int64,Array{Int64,1}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.atmost","text":"Constructs a BDD mapping to true if at most n literals in L are in the input; otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.conjunctions-Tuple{Union{UnitRange{Int64}, Set{Int64}, Array{Int64,1}}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.conjunctions","text":"Computes all possible valuations of scope V as conjunctions.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.convals-Tuple{Union{UnitRange{Int64}, Set{Int64}, Array{Int64,1}}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.convals","text":"Computes all possible valuations of scope V as both conjunctions and instantiation values.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.culledfreqs-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.culledfreqs","text":"Returns an approximation (does not account for some repeated nodes) of how many times each variable is mentioned in α.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.eliminate-Tuple{Diagram,Int64}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.eliminate","text":"Eliminate a variable through disjunction. Equivalent to the expression (ϕ|x ∨ ϕ|¬x).\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.exactly!-Tuple{Int64,Array{Int64,1}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.exactly!","text":"Constructs a BDD mapping to true if exactly n literals in L are in the input; otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.exactly-Tuple{Int64,Array{Int64,1}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.exactly","text":"Constructs a BDD mapping to true if exactly n literals in L are in the input; otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.forget-Tuple{Diagram,Union{Int32, Int64, UInt32, UInt64}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.forget","text":"Returns the resulting BDD after applying the forget operation. Equivalent to phi_x vee phi_neg x.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.from_npbc-Tuple{Array{Int64,1},Int64}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.from_npbc","text":"Translates a cardinality constraint in normal pseudo-boolean constraint form into a BDD.\n\nSince cardinality constraints correspond to having coefficients set to one, we ignore the C's.\n\nArgument L corresponds to the vector of literals to be chosen from; b is how many literals in L are selected.\n\nSee Eén and Sörensson 2006.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.is_atom-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.is_atom","text":"Returns whether the given Diagram node is an atomic formula (i.e. a variable, ⊥, ⊤, or literal).\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.is_lit-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.is_lit","text":"Returns whether the given Diagram node represents a literal.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.is_term-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.is_term","text":"Returns whether this Diagram node is terminal.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.is_var-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.is_var","text":"Returns whether the given Diagram node represents a variable.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.is_⊤-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.is_⊤","text":"Returns whether the given Diagram node represents a ⊤.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.is_⊥-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.is_⊥","text":"Returns whether the given Diagram node represents a ⊥.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.lit_val-Tuple{Diagram,Union{Int32, Int64, UInt16, UInt32, UInt64}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.lit_val","text":"Returns whether a variable x appears as a positive literal in α, given that α is a conjunction of literals.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.lit_vec-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.lit_vec","text":"Assumes ϕ is a full conjunction of literals. Returns ϕ as a zero-one vector and its scope.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.load-Tuple{String}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.load","text":"Loads a BDD from given file.\n\nSupported file formats:\n\nCNF (.cnf);\nDNF (.dnf);\nBDD (.bdd).\n\nTo load as any of these file formats, simply set the filename with the desired extension.\n\nKeyword arguments are passed down to the open function.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.load_bdd-Tuple{String}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.load_bdd","text":"Loads a BDD from a file. Use load instead.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.load_cnf-Tuple{String}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.load_cnf","text":"Loads a CNF as a BDD. Use load instead.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.load_dnf-Tuple{String}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.load_dnf","text":"Loads a CNF as a BDD. Use load instead.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.map_parents-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.map_parents","text":"Computes a mapping of the parents of each node.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.marginalize-Tuple{Diagram,Int64,Any}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.marginalize","text":"Marginalize a variable through some binary operation.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.mentions-Tuple{Diagram,Union{Int32, Int64, UInt32, UInt64}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.mentions","text":"Returns whether the formula (i.e. BDD) mentions a variable.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.normal_form-Tuple{Diagram,Bool}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.normal_form","text":"Runs a BFS on the mapping of parents, starting from either a ⊤ (true) or ⊥ (false) in order to find the corresponding CNF or DNF encoding.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.or-Tuple{Diagram,Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.or","text":"Returns a disjunction over the given boolean functions.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.postorder-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.postorder","text":"Returns a Vector{Diagram} containing all nodes in α in post-order.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.print_conjunction-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.print_conjunction","text":"Pretty print a conjunction of literals BDD.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.print_nf-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.print_nf","text":"Pretty print BDD as a normal form (CNF or DNF).\n\nCaution: may exponentially explode.\n\nAlternatively, pretty prints using the given glyphs (default ∧, ∨ and ¬).\n\nϕ = (1 ∧ ¬2) ∨ (2 ∧ 3)\nprint_nf(α; out = false)\n\nϕ = (1 ∧ ¬2) ∨ (2 ∧ 3)\nprint_nf(α; out = false, which = \"dnf\", glyphs = ['+', '*', '-'])\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.reduce!-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.reduce!","text":"Reduce a Diagram rooted at α inplace, removing duplicate nodes and redundant sub-trees. Returns canonical representation of α.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.restrict-Tuple{Diagram,Dict{Int64,Bool}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.restrict","text":"Returns a new reduced Diagram restricted to instantiation X.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.restrict_step-Tuple{Diagram,AbstractArray{Bool,N} where N,Dict{Int64,Diagram}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.restrict_step","text":"Returns a new Diagram restricted to instantiation X.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.restrict_step-Tuple{Diagram,Dict{Int64,Bool},Dict{Int64,Diagram}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.restrict_step","text":"Returns a new Diagram restricted to instantiation X.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.save-Tuple{Diagram,String}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.save","text":"Saves a BDD as a file.\n\nSupported file formats:\n\nCNF (.cnf);\nDNF (.dnf);\nBDD (.bdd).\n\nTo save as any of these file formats, simply set the filename with the desired extension.\n\nKeyword arguments are passed down to the open function.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.save_bdd-Tuple{Diagram,String}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.save_bdd","text":"Save as BDD. Use the save function instead.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.save_cnf-Tuple{Diagram,String}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.save_cnf","text":"Save as CNF. Use the save function instead.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.save_dnf-Tuple{Diagram,String}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.save_dnf","text":"Save as DNF. Use the save function instead.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.scope-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.scope","text":"Returns all variables in this formula as a Vector{Int}.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.scopeset-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.scopeset","text":"Returns all variables in this formula as a Set{Int}.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.shallowhash","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.shallowhash","text":"Returns a shallow hash for the given node (not BDD as a whole).\n\n\n\n\n\n","category":"function"},{"location":"#BinaryDecisionDiagrams.shannon!-Tuple{Diagram,Union{Set{Int64}, Array{Int64,1}}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.shannon!","text":"Performs Shannon's Decomposition on the Diagram α, given a set of variables to isolate. Any decomposition that results in a ⊥ is discarded.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.shannon-Tuple{Diagram,Int64}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.shannon","text":"Performs Shannon's Decomposition on the Diagram α, given a variable to isolate.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.shannon-Tuple{Diagram,Union{Set{Int64}, Array{Int64,1}}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.shannon","text":"Performs Shannon's Decomposition on the Diagram α, given a set of variables to isolate.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.terminal-Tuple{Bool}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.terminal","text":"Returns a new terminal node of given boolean value.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.to_int-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.to_int","text":"Returns 0 if x is not a literal; else returns an integer representation of x.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.to_lit-Tuple{Diagram}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.to_lit","text":"Returns α as an Int32 literal. Assumes α is a leaf node.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.valuations-Tuple{Union{UnitRange{Int64}, Set{Int64}, Array{Int64,1}}}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.valuations","text":"Compute all possible valuations of scope V.\n\n\n\n\n\n","category":"method"},{"location":"#BinaryDecisionDiagrams.variable-Tuple{Int64}","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams.variable","text":"Returns a Diagram representing a single variable. If negative, negate variable.\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"BinaryDecisionDiagrams Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"BinaryDecisionDiagrams Documentation","title":"BinaryDecisionDiagrams Documentation","text":"","category":"page"}]
}
